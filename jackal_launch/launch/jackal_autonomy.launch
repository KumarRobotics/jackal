<?xml version="1.0" encoding="UTF-8"?>
<launch>
  <arg name="upslam" default="False"/>
  <arg name="loam" default="False"/>
  <arg name="output" default="screen"/>

  <!-- Launch the ROS navigation stack -->
  <include file="$(find jackal_navigation)/launch/jackal_navigation.launch" pass_all_args="true"/>

  <node pkg="tf2_ros" type="static_transform_publisher" name="link1_broadcaster" args="0 0 0 3.14159 0 0 map odom" />

  <!-- Static transform between odom and robot/local_mapper frame and from local_pose to base_link frame to include Anthony's mapper -->
  <!--node pkg="tf2_ros" type="static_transform_publisher" name="odom_mapper_broadcaster" args="0 0 0 0 0 0 1 odom robot/map_local_mapper" />
  <node pkg="tf2_ros" type="static_transform_publisher" name="odom_mapper_broadcaster" args="0 0 0 0 0 0 1 local_pose base_link" /-->

  <!-- Launch LeGO-LOAM -->
  <group if="$(eval arg('loam'))">
    <include file="$(find lego_loam)/launch/run.launch" pass_all_args="true">
      <arg name="use_sim_time" value="False" />
    </include>
  </group>

  <!-- Connect upslam to robot tf tree -->
  <!-- If upslam isn't running, doesn't hurt -->
  <group if="$(eval not arg('loam'))">
    <node pkg="tf2_ros" type="static_transform_publisher" name="connect_upslam_tf" args="0 0 0 3.14159 0 0 global_pose base_link" />
  </group>

  <!-- Dummy transform for testing -->
  <!--
  <node pkg="tf2_ros" type="static_transform_publisher" name="dummy_upslam" args="200 200 0 0 0 0 map local_pose" />
  -->

  <!--Launch Anthony's Mapper -->
  <group if="$(eval arg('upslam'))">
    <include file="$(find depth_atlas)/launch/mapper.launch" pass_all_args="true"/>
  </group>

  <!-- Launch Octomap server -->
  <group if="$(eval arg('loam'))">
    <node pkg="octomap_server" type="octomap_server_node" name="octomap_server" output="$(arg output)">
      <param name="resolution" value="0.2" />
      <param name="frame_id" value="map"/>
      <param name="base_frame_id" value="base_link"/>
      <param name="filter_ground" value="true" />
      <param name="ground_filter/distance" value="1.0" />
      <param name="ground_filter/angle" value="0.2" />
      <param name="ground_filter/plane_distance" value="1.0" />
      <param name="sensor_model/max_range" value="20.0" />
      <param name="pointcloud_max_z" value="2" />
      <remap from="cloud_in" to="os1_cloud_node/points/origin_filtered" />
      <remap from="projected_map" to="map" />
    </node>
  </group>

  <!-- Pointcloud filter nodelet -->
  <node pkg="nodelet" type="nodelet" name="pcl_manager" args="manager" output="$(arg output)" />

  <node pkg="nodelet" type="nodelet" name="passthrough" args="load pcl/PassThrough pcl_manager" output="$(arg output)">
    <remap from="~input" to="os1_cloud_node/points" />
    <rosparam>
      filter_field_name: x
      filter_limit_min: -0.001
      filter_limit_max: 0.001
      filter_limit_negative: True
    </rosparam>
    <remap from="~output" to="os1_cloud_node/points/origin_filtered" />
  </node>
  <node pkg="nodelet" type="nodelet" name="passthrough2" args="load pcl/PassThrough pcl_manager" output="$(arg output)">
    <remap from="~input" to="os1_cloud_node/points/origin_filtered" />
    <rosparam>
      filter_field_name: z
      filter_limit_min: 0.2
      filter_limit_max: 2.0
      filter_limit_negative: False
    </rosparam>
    <remap from="~output" to="os1_cloud_node/points/origin_ground_filtered" />
  </node>
</launch>
